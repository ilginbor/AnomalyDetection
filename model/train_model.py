import os
import joblib
from sklearn.ensemble import IsolationForest
from sklearn.metrics import classification_report, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

from utils.preprocess import load_and_preprocess  # Veriyi yÃ¼kleyip Ã¶lÃ§eklendiren ve iÅŸleyen fonksiyon

def train_model():
    # ğŸ“Œ 1. Veri YÃ¼kleme ve Ã–n Ä°ÅŸleme
    df = load_and_preprocess("data/creditcard.csv")  # Veriyi oku ve hazÄ±rla (Ã¶lÃ§ekleme + class dengesi)

    # ğŸ“Œ 2. Isolation Forest modeli oluÅŸturuluyor
    model = IsolationForest(contamination=0.001, random_state=42)  # %0.1 oranÄ±nda anomali varsayÄ±mÄ±
    model.fit(df.drop("Class", axis=1))  # SÄ±nÄ±f etiketi hariÃ§ tÃ¼m verilerle eÄŸit

    # ğŸ“Œ 3. Tahmin yapÄ±lÄ±r ve -1 â†’ 1 (anormal), 1 â†’ 0 (normal) olarak etiketlenir
    df["anomaly"] = model.predict(df.drop("Class", axis=1))        # Tahmin sonucu: -1 veya 1
    df["anomaly"] = df["anomaly"].apply(lambda x: 1 if x == -1 else 0)  # -1 â†’ 1 (anormal), 1 â†’ 0 (normal)

    # ğŸ“Œ 4. EÄŸitilen modeli 'model/' klasÃ¶rÃ¼ne kaydet
    os.makedirs("model", exist_ok=True)  # model klasÃ¶rÃ¼ yoksa oluÅŸtur
    joblib.dump(model, "model/anomaly_model.pkl")  # model kaydÄ±

    # ğŸ“Œ 5. Model PerformansÄ±: precision, recall, f1-score, accuracy vs.
    report = classification_report(df["Class"], df["anomaly"])  # GerÃ§ek vs tahmin etiketleri
    matrix = confusion_matrix(df["Class"], df["anomaly"])       # KarÄ±ÅŸÄ±klÄ±k matrisi

    # ğŸ“Œ 6. DeÄŸerlendirme Ã§Ä±ktÄ±sÄ± metin olarak kaydedilir
    os.makedirs("results", exist_ok=True)
    with open("results/evaluation.txt", "w") as f:
        f.write(report)

    # ğŸ“Œ 7. Confusion Matrix gÃ¶rselleÅŸtirilip PNG olarak kaydedilir
    sns.heatmap(matrix, annot=True, fmt="d")
    plt.title("Confusion Matrix")
    plt.xlabel("Predicted")
    plt.ylabel("Actual")
    plt.tight_layout()
    plt.savefig("results/confusion_matrix.png")
    plt.close()

# Bu dosya doÄŸrudan Ã§alÄ±ÅŸtÄ±rÄ±ldÄ±ÄŸÄ±nda eÄŸitim iÅŸlemi baÅŸlatÄ±lÄ±r
if __name__ == "__main__":
    print("[INFO] EÄŸitim baÅŸlÄ±yor...")
    train_model()
    print("[INFO] EÄŸitim tamamlandÄ±.")
